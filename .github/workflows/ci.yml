name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: 18
  DATABASE_URL: postgresql://mangu_user:MxiXcjyvHot7BjuMuwUlmbYLqmv79jlH@localhost:5432/mangu_db
  REDIS_URL: redis://localhost:6379
  DISABLE_REDIS: 1  # For PR validation, use Redis stub
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  validate-migrations:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: mangu_user
          POSTGRES_PASSWORD: MxiXcjyvHot7BjuMuwUlmbYLqmv79jlH
          POSTGRES_DB: mangu_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install server dependencies
        run: cd server && npm ci

      - name: Verify migrations
        run: |
          # Test migrations can apply cleanly
          cd server && node src/database/migrate.js
          
          # Test rollback
          if [ -d "src/database/migrations" ]; then
            for f in src/database/migrations/*.down.sql src/database/migrations/*.rollback.sql; do
              if [ -f "$f" ]; then
                # Verify rollback SQL is valid
                PGPASSWORD=MxiXcjyvHot7BjuMuwUlmbYLqmv79jlH psql -h localhost -U mangu_user -d mangu_db -f "$f" --echo-errors
              fi
            done
          fi
          
          # Reset and verify init.sql for good measure
          FORCE_RESET=1 node src/database/reset.js

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run npm audit (server)
        run: cd server && npm audit --production --audit-level=moderate
        continue-on-error: true

      - name: Run npm audit (client)
        run: cd client && npm audit --production --audit-level=moderate
        continue-on-error: true

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          queries: security-extended

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript"

  lint-and-test:
    runs-on: ubuntu-latest
    needs: [validate-migrations]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: mangu_user
          POSTGRES_PASSWORD: MxiXcjyvHot7BjuMuwUlmbYLqmv79jlH
          POSTGRES_DB: mangu_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci  # Root workspace
          cd server && npm ci
          cd ../client && npm ci

      - name: Run linting
        run: |
          cd server && npm run lint:check
          cd ../client && npm run lint:check

      - name: Initialize test database
        run: |
          cd server
          node src/database/migrate.js
          node src/database/seed.js

      - name: Run server tests
        run: cd server && npm test

      - name: Run client tests
        run: cd client && npm test

      - name: Run E2E tests
        run: |
          # Start services in background
          cd server && npm run dev &
          SERVER_PID=$!
          cd ../client && npm run dev &
          CLIENT_PID=$!
          
          # Wait for services
          wget -qO- http://localhost:5000/api/health
          wget -qO- http://localhost:5173
          
          # Run E2E tests
          cd client && npm run test:e2e
          
          # Cleanup
          kill $SERVER_PID $CLIENT_PID

  infra-validate:
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    steps:
      - uses: actions/checkout@v3

      - name: Validate Docker Compose
        run: |
          docker-compose -f docker-compose.yml config
          docker-compose -f docker-compose.dev.yml config

      - name: Validate infrastructure
        if: hashFiles('infrastructure/terraform/**/*.tf') != ''
        run: |
          cd infrastructure/terraform
          
          # Install Terraform
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform
          
          # Validate Terraform configs
          for dir in environments/*; do
            if [ -d "$dir" ]; then
              echo "Validating $dir..."
              cd "$dir"
              terraform init -backend=false
              terraform validate
              cd ../../
            fi
          done

      - name: Validate Kubernetes manifests
        if: hashFiles('infrastructure/k8s/**/*.yaml') != ''
        run: |
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
          # Validate all manifests
          find infrastructure/k8s -name "*.yaml" -exec kubectl apply --dry-run=client -f {} \;

  deploy-preview:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [validate-migrations, security-scan, lint-and-test, infra-validate]
    environment: preview
    steps:
      - uses: actions/checkout@v3
      
      - name: Build preview image
        run: |
          docker build -t mangu-preview:${{ github.sha }} .
          # In a real setup, push to registry and deploy to preview environment
          echo "Preview environment would be deployed from ${{ github.sha }}"
          
      - name: Comment preview URL
        uses: actions/github-script@v6
        with:
          script: |
            const issue_number = context.issue.number;
            const preview_url = `https://pr-${issue_number}.preview.mangu-publishing.com`;  // Example URL
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Preview environment ready at: ${preview_url}\n\nValidation Summary:\n- âœ… Migrations valid\n- âœ… Security scan passed\n- âœ… Tests passing\n- âœ… Infrastructure valid`
            });

  cleanup-preview:
    if: github.event.action == 'closed' && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Remove preview environment
        run: echo "Would remove preview environment for PR #${{ github.event.number }}"