#!/bin/bash
# Auto Git Push & PR Script
# Automatically commits changes and creates PRs

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration
REPO_DIR="/Users/redinc23gmail.com/projects/mangu2-publishing"
BRANCH_PREFIX="auto-update"
GITHUB_REPO="redinc23/mangu_publishing-site"
MAIN_BRANCH="main"

# Change to repo directory
cd "$REPO_DIR" || exit 1

# Load credentials if available
if [ -f "scripts/credentials/local.sh" ]; then
  source scripts/credentials/local.sh
fi

# Function to generate branch name
generate_branch_name() {
  local timestamp=$(date +%Y%m%d-%H%M%S)
  echo "${BRANCH_PREFIX}-${timestamp}"
}

# Function to check if there are changes
has_changes() {
  git status --porcelain | grep -q .
}

# Function to get change summary
get_change_summary() {
  git status --short | head -10 | sed 's/^/  /'
}

# Function to commit changes
commit_changes() {
  local branch_name=$1
  local commit_message=$2
  
  echo -e "${GREEN}üìù Committing changes...${NC}"
  git add -A
  
  # Check if there are staged changes
  if git diff --cached --quiet; then
    echo -e "${YELLOW}‚ö†Ô∏è  No changes to commit${NC}"
    return 1
  fi
  
  git commit -m "$commit_message" || {
    echo -e "${RED}‚ùå Commit failed${NC}"
    return 1
  }
  
  echo -e "${GREEN}‚úÖ Changes committed${NC}"
  return 0
}

# Function to push branch
push_branch() {
  local branch_name=$1
  
  echo -e "${GREEN}üöÄ Pushing branch: ${branch_name}${NC}"
  git push origin "$branch_name" || {
    echo -e "${RED}‚ùå Push failed${NC}"
    return 1
  }
  
  echo -e "${GREEN}‚úÖ Branch pushed${NC}"
  return 0
}

# Function to create PR
create_pr() {
  local branch_name=$1
  local title=$2
  local body=$3
  
  echo -e "${GREEN}üîÄ Creating PR...${NC}"
  
  # Check if gh CLI is available
  if ! command -v gh &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  GitHub CLI not found. Install it to auto-create PRs${NC}"
    echo -e "${YELLOW}   PR URL will be printed instead${NC}"
    echo "https://github.com/${GITHUB_REPO}/compare/${MAIN_BRANCH}...${branch_name}?expand=1"
    return 1
  fi
  
  # Create PR using gh CLI
  gh pr create \
    --repo "$GITHUB_REPO" \
    --base "$MAIN_BRANCH" \
    --head "$branch_name" \
    --title "$title" \
    --body "$body" \
    --fill || {
    echo -e "${YELLOW}‚ö†Ô∏è  PR creation failed. Creating manually...${NC}"
    echo "https://github.com/${GITHUB_REPO}/compare/${MAIN_BRANCH}...${branch_name}?expand=1"
    return 1
  }
  
  echo -e "${GREEN}‚úÖ PR created${NC}"
  return 0
}

# Function to generate commit message
generate_commit_message() {
  local branch_name=$1
  local changes=$(git status --short | wc -l | tr -d ' ')
  local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  
  cat <<EOF
chore: Auto-update ${timestamp}

- ${changes} file(s) changed
- Auto-generated by auto-push script
- Branch: ${branch_name}
EOF
}

# Function to generate PR title
generate_pr_title() {
  local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  echo "Auto-update: ${timestamp}"
}

# Function to generate PR body
generate_pr_body() {
  local branch_name=$1
  local changes=$(git status --short | head -20)
  
  cat <<EOF
## ü§ñ Automated Update

This PR was automatically generated by the auto-push script.

### Changes
\`\`\`
${changes}
\`\`\`

### Branch
\`${branch_name}\`

### Generated
$(date -u +"%Y-%m-%d %H:%M:%S UTC")

---
*This is an automated PR. Please review before merging.*
EOF
}

# Main function
main() {
  echo -e "${GREEN}ü§ñ Auto Git Push & PR Script${NC}"
  echo "=================================="
  
  # Check if we're in a git repo
  if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Not a git repository${NC}"
    exit 1
  fi
  
  # Check if there are changes
  if ! has_changes; then
    echo -e "${YELLOW}‚ÑπÔ∏è  No changes to commit${NC}"
    exit 0
  fi
  
  # Show changes
  echo -e "${GREEN}üìã Changes detected:${NC}"
  get_change_summary
  echo ""
  
  # Generate branch name
  BRANCH_NAME=$(generate_branch_name)
  echo -e "${GREEN}üåø Branch: ${BRANCH_NAME}${NC}"
  
  # Create and checkout branch
  echo -e "${GREEN}üîÄ Creating branch...${NC}"
  git checkout -b "$BRANCH_NAME" || {
    echo -e "${YELLOW}‚ö†Ô∏è  Branch might already exist, checking out...${NC}"
    git checkout "$BRANCH_NAME"
  }
  
  # Generate commit message
  COMMIT_MSG=$(generate_commit_message "$BRANCH_NAME")
  
  # Commit changes
  if ! commit_changes "$BRANCH_NAME" "$COMMIT_MSG"; then
    echo -e "${YELLOW}‚ö†Ô∏è  No changes to commit, exiting${NC}"
    exit 0
  fi
  
  # Push branch
  if ! push_branch "$BRANCH_NAME"; then
    echo -e "${RED}‚ùå Failed to push branch${NC}"
    exit 1
  fi
  
  # Generate PR details
  PR_TITLE=$(generate_pr_title)
  PR_BODY=$(generate_pr_body "$BRANCH_NAME")
  
  # Create PR
  create_pr "$BRANCH_NAME" "$PR_TITLE" "$PR_BODY"
  
  echo ""
  echo -e "${GREEN}‚úÖ Done!${NC}"
  echo -e "${GREEN}üìù Branch: ${BRANCH_NAME}${NC}"
  echo -e "${GREEN}üîó View PR: https://github.com/${GITHUB_REPO}/compare/${MAIN_BRANCH}...${BRANCH_NAME}${NC}"
}

# Run main function
main "$@"

